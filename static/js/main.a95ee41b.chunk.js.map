{"version":3,"sources":["boxes-reducer.js","profile-reducer.js","store.js","ColorBox.js","ColorBoxes.js","Profile.js","App.js","index.js"],"names":["makeRandomColor","Math","random","toString","makeNewBox","color","isLocked","makeDeepCopy","obj","JSON","parse","stringify","initialState","boxesReducer","state","action","newState","type","newBoxes","pop","boxIndex","currentBoxes","map","box","firstName","profileReducer","rootReducer","combineReducers","profile","boxes","myStore","createStore","ColorBox","props","idx","_allBoxes","style","border","backgroundColor","width","height","textAlign","btnText","onClick","toggleLock","borderRadius","padding","ConnectedColorBoxes","connect","dispatch","randomize","addBox","removeBox","index","display","flexWrap","justifyContent","key","ConnectedProfile","onChange","changeEvent","target","value","name","App","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.a95ee41b.chunk.js","sourcesContent":["const makeRandomColor = () => {\n  return '#'+(Math.random()*0xFFFFFF<<0).toString(16);\n}\n\nconst makeNewBox = () => {\n  return {\n    color: makeRandomColor(),\n    isLocked: false\n  }\n}\n\nconst makeDeepCopy = (obj) => {\n  return JSON.parse(JSON.stringify(obj))\n}\n\nconst initialState = [\n  makeNewBox(),\n  makeNewBox(),\n  makeNewBox()\n]\nconst boxesReducer = (state = initialState, action) => {\n  const newState = makeDeepCopy(state)\n\n  if (action.type === 'ADD_BOX') {\n    return [\n      ...newState,\n      makeNewBox()\n    ]\n  } else if (action.type === 'REMOVE_BOX') {\n      const newBoxes = [...newState]\n      newBoxes.pop()\n      return newBoxes\n  } else if (action.type === 'TOGGLE_LOCK') {\n      const newBoxes = [...newState]\n      newBoxes[action.boxIndex].isLocked = !newBoxes[action.boxIndex].isLocked\n  } else if (action.type === 'RANDOMIZE') {\n      const currentBoxes = [...newState]\n      const newBoxes = currentBoxes.map((box) => {\n        if (!box.isLocked) {\n          box.color = makeRandomColor()\n        }\n        return box;\n      })\n  }\n  return newState\n}\n\nexport default boxesReducer;","const initialState = {\n  firstName: \"\"\n}\n\nconst profileReducer = (state = initialState, action) => {\n  if (action.type === \"UPDATE_PROFILE\") {\n    const newState = {...state}\n    newState.firstName = action.firstName\n\n    return newState\n  }\n  return state\n}\n\nexport default profileReducer","import { createStore, combineReducers } from 'redux';\n\nimport boxesReducer from './boxes-reducer'\nimport profileReducer from './profile-reducer'\n\nconst rootReducer = combineReducers({\n  profile: profileReducer,\n  boxes: boxesReducer\n})\n\nconst myStore = createStore(rootReducer);\n\nexport default myStore;","import React from 'react';\n\nfunction ColorBox (props, idx, _allBoxes) {\n  const style = {\n    border: \"2px solid black\",\n    backgroundColor: props.color,\n    width: \"200px\",\n    height: \"200px\", \n    textAlign: 'center'\n  }\n\n  let btnText = 'Unlocked'\n  if (props.isLocked) {\n    btnText = 'Locked'\n  }\n\n  return (\n    <div style={style}>\n      <button onClick={props.toggleLock}>{btnText}</button>\n      <h3><span style={{ backgroundColor: '#373637', color: '#ffffff', borderRadius: '5px', padding: '0 5px' }}>{props.color}</span></h3>\n    </div>\n  )\n}\n\nexport default ColorBox;","import React from 'react';\n// import './App.css';\nimport { connect } from 'react-redux'\n\nimport ColorBox from './ColorBox';\n// import myStore from './store';\n\nfunction ColorBoxes(props) {\n  return (\n      <div style={{ textAlign: 'center' }}>\n        <button onClick={props.randomize}>Randomize!</button>\n        <button onClick={props.addBox}>Add box</button>\n        <button onClick={props.removeBox}>Remove box</button>\n        <div style={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'center' }}>\n          {props.boxes.map((box, idx) => (\n            <ColorBox {...box} key={idx} toggleLock={() => props.toggleLock(idx)}/>\n          ))}\n        </div>\n      </div>\n  )\n}\n\nconst ConnectedColorBoxes = connect(\n  (state) => {\n    return {\n      boxes: state.boxes\n    }\n  },\n  (dispatch) => {\n    return {\n      randomize: () => {\n        return dispatch({\n          type: 'RANDOMIZE'\n        })\n      },\n      addBox: () => {\n        return dispatch({\n          type: 'ADD_BOX'\n        })\n      },\n      removeBox: () => {\n        return dispatch({\n          type: 'REMOVE_BOX'\n        })\n      },\n      toggleLock: (index) => {\n        return dispatch({\n          type: 'TOGGLE_LOCK',\n          boxIndex: index\n        })\n      }\n    }\n  }\n)(ColorBoxes)\n\nexport default ConnectedColorBoxes;\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport myStore from './store'\n\nconst Profile = (props) => {\n  return (\n    <div>\n      <form>\n        <input \n          onChange={(changeEvent) => {\n            myStore.dispatch({ \n              type: \"UPDATE_PROFILE\",\n              firstName: changeEvent.target.value\n            })\n          }}\n          type=\"text\" \n          name=\"firstName\" \n          value={props.profile.firstName}\n        />\n      </form>\n    </div>\n  )\n}\n\nconst ConnectedProfile = connect(\n  (state) => {\n    return {\n      profile: state.profile\n    }\n  }\n)(Profile)\n\nexport default ConnectedProfile;","import React from 'react';\nimport './App.css';\n\nimport ColorBoxes from './ColorBoxes'\nimport Profile from './Profile'\n\nfunction App(props) {\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <Profile />\n      <ColorBoxes />\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\n\nimport myStore from './store'\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={myStore}>\n    <App/>\n  </Provider>, \n  document.getElementById('root'));\n\nmyStore.dispatch({ type: null });\n"],"sourceRoot":""}